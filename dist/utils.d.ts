/// <reference types="react" />
import type { Collapsed, CustomizeOptions, DisplaySize, Editable } from './types';
export declare function isObject(node: any): node is Record<string, any>;
export declare function objectSize(node: Record<string, any> | Array<any>): number;
export declare function stringifyForCopying(node: any, space?: string | number | undefined): string;
export declare function writeClipboard(value: string): Promise<void>;
export declare function isCollapsed(node: Record<string, any> | Array<any>, depth: number, indexOrName: number | string | undefined, collapsed: Collapsed, collapseObjectsAfterLength: number, customOptions?: CustomizeOptions): boolean;
export declare function isCollapsed_largeArray(node: Record<string, any> | Array<any>, depth: number, indexOrName: number | string | undefined, collapsed: Collapsed, collapseObjectsAfterLength: number, customOptions?: CustomizeOptions): boolean;
export declare function ifDisplay(displaySize: DisplaySize, depth: number, fold: boolean): boolean;
export declare function safeCall<T extends (...args: any[]) => any>(func: T, params: Parameters<T>): any;
export declare function editableAdd(editable: Editable): true | undefined;
export declare function editableEdit(editable: Editable): true | undefined;
export declare function editableDelete(editable: Editable): true | undefined;
export declare function isReactComponent(component: any): component is (new () => React.Component<any, any>) | React.FC<any>;
export declare function customAdd(customOptions?: CustomizeOptions): boolean;
export declare function customEdit(customOptions?: CustomizeOptions): boolean;
export declare function customDelete(customOptions?: CustomizeOptions): boolean;
export declare function customCopy(customOptions?: CustomizeOptions): boolean;
export declare function customMatchesURL(customOptions?: CustomizeOptions): boolean;
export declare function resolveEvalFailedNewValue(type: string, value: string): string;
